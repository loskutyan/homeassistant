bedroom_air:
  input_boolean:
    bedroom_airpurifier_favourite_speed_smart_control:
      name: 'Умное управление скоростью бризера в спальне'


  input_number:
    bedroom_airpurifier_favorite_speed:
      name: 'Установленная скорость бризера в спальне'
      min: 60
      max: 150
      step: 1
      icon: mdi:weather-windy


  input_select:
    bedroom_airpurifier_mode:
      name: 'Режим работы бризера в спальне'
      options:
        - Auto
        - Sleep
        - Favorite


  timer:
    bedroom_airpurifier_fixed_speed:
      name: 'Фиксированная скорость бризера в спальне, осталось '
      duration: 1800

    bedroom_airpurifier_heater_remind:
      name: 'Нагреватель бризера в спальне включен, напомнить через '
      duration: 7200

    bedroom_airpurifier_heater_turn_off:
      name: 'Нагреватель бризера в спальне включен, выключение через '
      duration: 18000

    bedroom_airpurifier_heater_cooldown:
      name: 'Нагреватель бризера в спальне остывает, можно включить через '
      duration: 1800

    bedroom_periodic_ventilation:
      name: 'Периодическое проветривание в спальне, осталось '
      duration: 3600


  switch:
    - platform: template
      switches:
        bedroom_airpurifier_display:
          friendly_name: 'Дисплей бризера в спальне'
          value_template: '{{ is_state_attr(''fan.mijia_airpurifier_bedroom'', ''display'', True) }}'
          turn_on:
            service: xiaomi_miio_airpurifier.fan_set_display_on
            entity_id: fan.mijia_airpurifier_bedroom
          turn_off:
            service: xiaomi_miio_airpurifier.fan_set_display_off
            entity_id: fan.mijia_airpurifier_bedroom
          icon_template: mdi:lightbulb-outline

        bedroom_airpurifier_buzzer:
          friendly_name: 'Звук бризера в спальне'
          value_template: '{{ is_state_attr(''fan.mijia_airpurifier_bedroom'', ''buzzer'', True) }}'
          turn_on:
            service: xiaomi_miio_airpurifier.fan_set_buzzer_on
            entity_id: fan.mijia_airpurifier_bedroom
          turn_off:
            service: xiaomi_miio_airpurifier.fan_set_buzzer_off
            entity_id: fan.mijia_airpurifier_bedroom
          icon_template: mdi:volume-high

        bedroom_airpurifier_ptc:
          friendly_name: 'Нагреватель бризера в спальне'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''ptc'') }}'
          availability_template: '{{ states(''fan.mijia_airpurifier_bedroom'') in [''on'', ''off''] }}'
          turn_on:
            service: xiaomi_miio_airpurifier.fan_set_ptc_on
            entity_id: fan.mijia_airpurifier_bedroom
          turn_off:
            service: xiaomi_miio_airpurifier.fan_set_ptc_off
            entity_id: fan.mijia_airpurifier_bedroom
          icon_template: mdi:fire

        bedroom_airpurifier_forced_ventilation:
          friendly_name: 'Проветривание в спальне'
          value_template: >
            {% set favorite_mode = is_state_attr('fan.mijia_airpurifier_bedroom', 'preset_mode', 'Favorite') %}
            {% set max_speed_flag = states('sensor.bedroom_airpurifier_favorite_speed') | int(0) == 150 %}
            {% set fixed_speed_timer_on = is_state('timer.bedroom_airpurifier_fixed_speed', 'active') %}
            {{ favorite_mode and max_speed_flag and fixed_speed_timer_on }}
          turn_on:
            - service: fan.turn_on
              entity_id: fan.mijia_airpurifier_bedroom
            - service: input_select.select_option
              entity_id: input_select.bedroom_airpurifier_mode
              data:
                option: 'Favorite'
            - service: input_number.set_value
              entity_id: input_number.bedroom_airpurifier_favorite_speed
              data:
                value: 150
            - service: timer.start
              entity_id: timer.bedroom_airpurifier_fixed_speed
          turn_off:
            - service: timer.finish
              entity_id: timer.bedroom_airpurifier_fixed_speed
          icon_template: mdi:weather-windy

        bedroom_airpurifier_favourite_speed_smart_control:
          friendly_name: 'Умное управление скоростью бризера в спальне'
          value_template: >
            {% set favorite_mode = is_state_attr('fan.mijia_airpurifier_bedroom', 'preset_mode', 'Favorite') %}
            {% set smart_control = is_state('input_boolean.bedroom_airpurifier_favourite_speed_smart_control', 'on') %}
            {{ favorite_mode and smart_control }}
          turn_on:
            - service: input_boolean.turn_on
              entity_id: input_boolean.bedroom_airpurifier_favourite_speed_smart_control
          turn_off:
            - service: input_boolean.turn_off
              entity_id: input_boolean.bedroom_airpurifier_favourite_speed_smart_control
          icon_template: mdi:speedometer

        bedroom_airpurifier_favourite_speed_temporary_fixed:
          friendly_name: 'Фиксированная скорость бризера в спальне'
          value_template: >
            {% set favorite_mode = is_state_attr('fan.mijia_airpurifier_bedroom', 'preset_mode', 'Favorite') %}
            {% set smart_control = is_state('switch.bedroom_airpurifier_favourite_speed_smart_control', 'on') %}
            {% set fixed_speed_timer_on = is_state('timer.bedroom_airpurifier_fixed_speed', 'active') %}
            {{ favorite_mode and smart_control and fixed_speed_timer_on }}
          turn_on:
            - service: timer.start
              entity_id: timer.bedroom_airpurifier_fixed_speed
          turn_off:
            - service: timer.finish
              entity_id: timer.bedroom_airpurifier_fixed_speed
          icon_template: mdi:speedometer


  sensor:
    - platform: template
      sensors:
        bedroom_airpurifier_co2:
          friendly_name: 'Mi Fresh Air Bedroom CO²'
          device_class: carbon_dioxide
          unit_of_measurement: 'ppm'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''co2'') }}'
          icon_template: mdi:molecule-co2

        bedroom_airpurifier_pm25:
          friendly_name: 'Mi Fresh Air Bedroom PM2.5'
          device_class: pm25
          unit_of_measurement: 'µg/m³'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''pm25'') }}'
          icon_template: mdi:grain

        bedroom_airpurifier_temperature:
          friendly_name: 'Mi Fresh Air Bedroom Температура'
          device_class: temperature
          unit_of_measurement: '°C'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''temperature'') }}'
          icon_template: mdi:thermometer

        bedroom_airpurifier_current_speed:
          friendly_name: 'Mi Fresh Air Bedroom Текущая скорость'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''control_speed'') }}'
          icon_template: mdi:speedometer

        bedroom_airpurifier_favorite_speed:
          friendly_name: 'Mi Fresh Air Bedroom Установленная скорость'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''favorite_speed'') }}'
          icon_template: mdi:speedometer

        bedroom_airpurifier_dust_filter_life_remaining:
          friendly_name: 'Mi Fresh Air Bedroom Состояние фильтра'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''dust_filter_life_remaining'') }}'
          unit_of_measurement: '%'
          icon_template: mdi:air-filter

        bedroom_airpurifier_dust_filter_life_remaining_days:
          friendly_name: 'Mi Fresh Air Bedroom Дней до замены фильтра'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''dust_filter_life_remaining_days'') }}'
          icon_template: mdi:air-filter

        bedroom_airpurifier_preset_mode:
          friendly_name: 'Mi Fresh Air Bedroom Режим работы'
          value_template: '{{ state_attr(''fan.mijia_airpurifier_bedroom'', ''preset_mode'') }}'

        bedroom_airpurifier_speed_min_co2:
          value_template:  >
            {% set temp_delta = max(0, 24 - states('sensor.bedroom_average_temperature') | float) %}
            {% set cooling_on = is_state('climate.bedroom_ac', 'cool') | int %}
            {% set shift_steps = temp_delta * 100 // 10 + 15 * cooling_on %}
            {% if states('sensor.bedroom_airpurifier_favorite_speed') | float <= 60 %}
              0
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 70 %}
              {{ 600 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 80 %}
              {{ 650 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 90 %}
              {{ 700 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 100 %}
              {{ 750 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 110 %}
              {{ 800 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 120 %}
              {{ 900 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 130 %}
              {{ 950 + 10 * shift_steps }}
            {% else %}
              1200
            {% endif %}
          availability_template: >
            {% set valid_speed = states('sensor.bedroom_airpurifier_favorite_speed') | float(0) >= 60 %}
            {% set valid_temp = states('sensor.bedroom_average_temperature') | float(0) > 0 %}
            {{ valid_speed and valid_temp }}

        bedroom_airpurifier_speed_max_co2:
          value_template:  >
            {% set temp_delta = max(0, 24 - states('sensor.bedroom_average_temperature') | float) %}
            {% set cooling_on = is_state('climate.bedroom_ac', 'cool') | int %}
            {% set shift_steps = temp_delta * 100 // 10 + 15 * cooling_on %}
            {% if states('sensor.bedroom_airpurifier_favorite_speed') | float <= 60 %}
              {{ 600 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 70 %}
              {{ 650 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 80 %}
              {{ 700 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 90 %}
              {{ 750 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 100 %}
              {{ 800 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 110 %}
              {{ 900 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 120 %}
              {{ 950 + 10 * shift_steps }}
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 130 %}
              1200
            {% else %}
              5000
            {% endif %}
          availability_template: >
            {% set valid_speed = states('sensor.bedroom_airpurifier_favorite_speed') | float(0) >= 60 %}
            {% set valid_temp = states('sensor.bedroom_average_temperature') | float(0) > 0 %}
            {{ valid_speed and valid_temp }}

        bedroom_airpurifier_next_speed:
          value_template:  >
            {% if states('sensor.bedroom_airpurifier_favorite_speed') | float <= 60 %}
              70
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 70 %}
              80
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 80 %}
              90
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 90 %}
              100
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 100 %}
              110
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 110 %}
              120
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 120 %}
              130
            {% else %}
              150
            {% endif %}
          availability_template: '{{ states(''sensor.bedroom_airpurifier_favorite_speed'') | float(0) >= 60 }}'

        bedroom_airpurifier_previous_speed:
          value_template:  >
            {% if states('sensor.bedroom_airpurifier_favorite_speed') | float <= 70 %}
              60
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 80 %}
              70
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 90 %}
              80
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 100 %}
              90
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 110 %}
              100
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 120 %}
              110
            {% elif states('sensor.bedroom_airpurifier_favorite_speed') | float <= 130 %}
              120
            {% else %}
              130
            {% endif %}
          availability_template: '{{ states(''sensor.bedroom_airpurifier_favorite_speed'') | float(0) >= 60 }}'

        bedroom_airpurifier_favourite_speed_needs_changes:
          value_template: >
            {% set hi = (states('sensor.bedroom_airpurifier_speed_max_co2') | float) + 15 %}
            {% set lo = (states('sensor.bedroom_airpurifier_speed_min_co2') | float) - 35 %}
            {% set co2 = states('sensor.cleargrass_air_co2') | float %}
            {% if co2 > hi %}
              up
            {% elif co2 < lo %}
              down
            {% else %}
              keep
            {% endif %}
          availability_template: >
            {% set valid_min_co2 = states('sensor.bedroom_airpurifier_speed_min_co2') | float(-1) >= 0 %}
            {% set valid_max_co2 = states('sensor.bedroom_airpurifier_speed_max_co2') | float(-1) >= 0 %}
            {% set valid_co2 = states('sensor.cleargrass_air_co2') | float(0) > 0 %}
            {{ valid_min_co2 and valid_max_co2 and valid_co2 }}


  binary_sensor:
    - platform: template
      sensors:
        bedroom_airpurifier_ptc_status:
          friendly_name: 'Статус нагревателя бризера в спальне'
          device_class: heat
          value_template: '{{ is_state_attr(''fan.mijia_airpurifier_bedroom'', ''ptc_status'', True) }}'
        
        bedroom_airpurifier_favourite_speed_fixed:
          friendly_name: 'Фиксированная скорость бризера в спальне'
          value_template: >
            {% set smart_control_off = is_state('switch.bedroom_airpurifier_favourite_speed_smart_control', 'off') %}
            {% set tmp_fixed_speed = is_state('switch.bedroom_airpurifier_favourite_speed_temporary_fixed', 'on') %}
            {{ smart_control_off or tmp_fixed_speed }}


  automation:
    - id: 'Выбор режима работы бризера в спальне'
      alias: select_bedroom_airpurifier_preset_mode
      trigger:
        - entity_id: input_select.bedroom_airpurifier_mode
          platform: state
      action:
        - service: fan.set_preset_mode
          entity_id: fan.mijia_airpurifier_bedroom
          data_template:
            preset_mode: '{{ trigger.to_state.state }}'

    - id: 'Отслеживание режима работы бризера в спальне'
      alias: tracking_bedroom_airpurifier_preset_mode
      trigger:
        - platform: state
          entity_id: sensor.bedroom_airpurifier_preset_mode
      condition:
        - condition: template
          value_template: '{{ trigger.to_state.state not in [''unknown'', ''unavailable''] }}'
      action:
        - service: input_select.select_option
          entity_id: input_select.bedroom_airpurifier_mode
          data_template:
            option: '{{ trigger.to_state.state }}'

    - id: 'Выбор скорости потока воздуха для бризера в спальне'
      alias: select_bedroom_airpurifier_speed
      trigger:
        - platform: state
          entity_id: input_number.bedroom_airpurifier_favorite_speed
      action:
        - service: xiaomi_miio_airpurifier.fan_set_favorite_speed
          entity_id: fan.mijia_airpurifier_bedroom
          data_template:
            speed: '{{ trigger.to_state.state }}'

    - id: 'Отслеживание скорости потока воздуха для бризера в спальне'
      alias: tracking_bedroom_airpurifier_speed
      trigger:
        - platform: state
          entity_id: sensor.bedroom_airpurifier_favorite_speed
      condition:
        - condition: template
          value_template: '{{ trigger.to_state.state | int(0) > 0 }}'
      action:
        - service: input_number.set_value
          entity_id: input_number.bedroom_airpurifier_favorite_speed
          data_template:
            value: '{{ trigger.to_state.state | int }}'

    - id: 'Умный контроль скорости работы бризера в спальне'
      alias: bedroom_airpurifier_favourite_speed_smart_control
      initial_state: true
      trigger:
        - platform: time_pattern
          minutes: '/2'
      condition:
        - condition: state
          entity_id: sensor.bedroom_airpurifier_favourite_speed_needs_changes
          state:
            - 'up'
            - 'down'
        - condition: state
          entity_id: switch.bedroom_airpurifier_favourite_speed_smart_control
          state: 'on'
        - condition: state
          entity_id: switch.bedroom_airpurifier_favourite_speed_temporary_fixed
          state: 'off'
        - condition: template
          value_template: >
            {% set valid_prev_speed = states('sensor.bedroom_airpurifier_previous_speed') | int(0) > 0 %}
            {% set valid_next_speed = states('sensor.bedroom_airpurifier_previous_speed') | int(0) > 0 %}
            {{ valid_prev_speed and valid_next_speed }}
      action:
        - service: input_number.set_value
          entity_id: input_number.bedroom_airpurifier_favorite_speed
          data_template:
            value: >
              {% if is_state('sensor.bedroom_airpurifier_favourite_speed_needs_changes', 'up') %}
                {{ states('sensor.bedroom_airpurifier_next_speed') | int }}
              {% else %}
                {{ states('sensor.bedroom_airpurifier_previous_speed') | int }}
              {% endif %}

    - id: 'Включение нагревателя бризера в спальне'
      alias: bedroom_airpurifier_heater_turn_on
      initial_state: true
      trigger:
        - platform: time_pattern
          minutes: '/10'
        - platform: state
          entity_id: switch.somebody_home
          from: 'off'
          to: 'on'
        - platform: state
          entity_id: timer.bedroom_airpurifier_heater_cooldown
          to: 'idle'
      condition:
        - condition: state
          entity_id: switch.warm_season
          state: 'off'
        - condition: state
          entity_id: switch.somebody_home
          state: 'on'
        - condition: state
          entity_id: switch.bedroom_asleep
          state: 'off'
        - condition: state
          entity_id: fan.mijia_airpurifier_bedroom
          state: 'on'
          for:
            minutes: 1
        - condition: numeric_state
          entity_id: sensor.bedroom_average_temperature
          below: 22
        - not:
            - condition: state
              entity_id: timer.bedroom_airpurifier_heater_cooldown
              state: 'active'
      action:
        - service: switch.turn_on
          entity_id: switch.bedroom_airpurifier_ptc

    - id: 'Выключение нагревателя бризера в спальне'
      alias: bedroom_airpurifier_heater_turn_off
      initial_state: true
      trigger:
        - platform: state
          entity_id: timer.bedroom_airpurifier_heater_turn_off
          from: 'active'
          to: 'idle'
        - platform: numeric_state
          entity_id: sensor.bedroom_average_temperature
          above: 22.5
          for:
            minutes: 1
      condition:
        - condition: state
          entity_id: switch.bedroom_airpurifier_ptc
          state: 'on'
      action:
        - service: switch.turn_off
          entity_id: switch.bedroom_airpurifier_ptc

    - id: 'Включение нагревателя бризера в спальне - таймеры, уведомление'
      alias: bedroom_airpurifier_heater_turned_on_timers_notify
      initial_state: true
      trigger:
        - platform: state
          entity_id: switch.bedroom_airpurifier_ptc
          from: 'off'
          to: 'on'
      action:
        - service: timer.start
          entity_id:
            - timer.bedroom_airpurifier_heater_turn_off
            - timer.bedroom_airpurifier_heater_remind
        - service: timer.finish
          entity_id: timer.bedroom_airpurifier_heater_cooldown
        - service: notify.tg
          data:
            message: >
              {% set messages = ['Нагреватель бризера в спальне включен!',
                                 'Бризер в спальне начинает греть воздух..',
                                 'Нагреватель бризера в спальне начал жарить!'] %}
              {{ '\U0001F525' }}  {{ messages | random }} {{ states('sensor.time_date') }}
              {{ '\U0001F321' }} Температура {{ states('sensor.bedroom_average_temperature') | round(1) }}°C

    - id: 'Работает нагреватель бризера в спальне - уведомление'
      alias: bedroom_airpurifier_heater_on_reminder
      initial_state: true
      trigger:
        - platform: state
          entity_id: timer.bedroom_airpurifier_heater_remind
          from: 'active'
          to: 'idle'
        - platform: homeassistant
          event: start
      condition:
        - condition: state
          entity_id: switch.bedroom_airpurifier_ptc
          state: 'on'
      action:
        - service: notify.tg
          data:
            message: >
              {% set messages = ['Нагреватель бризера в спальне все еще работает!',
                                 'Бризер в спальне продолжает греть воздух..',
                                 'Нагреватель бризера в спальне еще жарит!'] %}
              {{ '\U0001F525' }} {{ messages | random }} {{ states('sensor.time_date') }}
        - service: timer.start
          entity_id: timer.bedroom_airpurifier_heater_remind

    - id: 'Выключение нагревателя бризера в спальне - таймеры, уведомление'
      alias: bedroom_airpurifier_heater_turned_off_timers_notify
      initial_state: true
      trigger:
        - platform: state
          entity_id: switch.bedroom_airpurifier_ptc
          from: 'on'
          to: 'off'
      action:
        - service: timer.finish
          entity_id:
            - timer.bedroom_airpurifier_heater_remind
            - timer.bedroom_airpurifier_heater_turn_off
        - service: timer.start
          entity_id: timer.bedroom_airpurifier_heater_cooldown
        - service: notify.tg
          data:
            message: >
              {% set messages = ['Нагреватель бризера в спальне выключен!',
                                 'Бризер в спальне завершает греть воздух..',
                                 'Нагреватель бризера в спальне покидает здание!'] %}
              {{ '\U0001F9EF' }} {{ messages | random }} {{ states('sensor.time_date') }}
              {{ '\U0001F321' }} Температура {{ states('sensor.bedroom_average_temperature') | round(1) }}°C

    - id: 'Включение бризера в спальне'
      alias: bedroom_airpurifier_turn_on
      initial_state: true
      trigger:
        - platform: time_pattern
          minutes: '/10'
        - platform: state
          entity_id: switch.somebody_home
          from: 'off'
          to: 'on'
      condition:
        - condition: state
          entity_id: switch.somebody_home
          state: 'on'
        - condition: state
          entity_id: fan.mijia_airpurifier_bedroom
          state: 'off'
        - condition: numeric_state
          entity_id: sensor.cleargrass_air_co2
          above: 650
      action:
        - service: fan.turn_on
          entity_id: fan.mijia_airpurifier_bedroom
        - delay: 00:00:30
        - if:
            - condition: state
              entity_id: fan.mijia_airpurifier_bedroom
              state: 'on'
          then:
            - service: notify.tg
              data:
                message: |
                  {{ '\U0001F4A8' }} Бризер в спальне включен.
                  {{ '\U0001F321' }} Температура {{ states('sensor.bedroom_average_temperature') | round(1) }}°C
                  {{ '\U0000269B' }} CO2 {{ states('sensor.cleargrass_air_co2') | int }}ppm

    - id: 'Выключение бризера в спальне, когда дома никого'
      alias: bedroom_airpurifier_nobody_home_turn_off
      initial_state: true
      trigger:
        - platform: time_pattern
          minutes: '/30'
        - platform: state
          entity_id: switch.somebody_home
          from: 'on'
          to: 'off'
      condition:
        - condition: state
          entity_id: switch.warm_season
          state: 'off'
        - condition: state
          entity_id: switch.somebody_home
          state: 'off'
        - condition: state
          entity_id: fan.mijia_airpurifier_bedroom
          state: 'on'
        - condition: numeric_state
          entity_id: sensor.cleargrass_air_co2
          below: 600
        - condition: numeric_state
          entity_id: sensor.bedroom_average_temperature
          below: 22
        - condition: state
          entity_id:
            - timer.bedroom_airpurifier_fixed_speed
            - timer.bedroom_periodic_ventilation
          state: 'idle'
      action:
        - service: switch.turn_off
          entity_id: switch.bedroom_airpurifier_ptc
          continue_on_error: true
        - service: fan.turn_off
          entity_id: fan.mijia_airpurifier_bedroom
        - delay: 00:00:30
        - if:
            - condition: state
              entity_id: fan.mijia_airpurifier_bedroom
              state: 'off'
          then:
            - service: notify.tg
              data:
                message: |
                  {{ '\U0001F4A8' }} Бризер в спальне выключен.
                  {{ '\U0001F321' }} Температура {{ states('sensor.bedroom_average_temperature') | round(1) }}°C
                  {{ '\U0000269B' }} CO2 {{ states('sensor.cleargrass_air_co2') | int }}ppm
