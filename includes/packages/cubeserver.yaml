cubeserver:
  sensor:
    - platform: command_line
      unique_id: cubeserver_parity_common_size_raw
      name: 'Cubeserver Parity Common Size Raw'
      command: 'ssh -i /config/cubeserver.key -o StrictHostKeyChecking=no root@{{ states(''sensor.cubeserver_ip'') }} /root/mdcmd status | sed -n ''s/mdResyncSize=//p'''

    - platform: command_line
      unique_id: cubeserver_parity_size_raw
      name: 'Cubeserver Parity Size Raw'
      command: 'ssh -i /config/cubeserver.key -o StrictHostKeyChecking=no root@{{ states(''sensor.cubeserver_ip'') }} /root/mdcmd status | sed -n ''s/mdResync=//p'''

    - platform: command_line
      unique_id: cubeserver_parity_pos_row
      name: 'Cubeserver Parity Pos Raw'
      command: 'ssh -i /config/cubeserver.key -o StrictHostKeyChecking=no root@{{ states(''sensor.cubeserver_ip'') }} /root/mdcmd status | sed -n ''s/mdResyncPos=//p'''

    - platform: command_line
      unique_id: cubeserver_parity_dt_raw
      name: 'Cubeserver Parity Dt Raw'
      command: 'ssh -i /config/cubeserver.key -o StrictHostKeyChecking=no root@{{ states(''sensor.cubeserver_ip'') }} /root/mdcmd status | sed -n ''s/mdResyncDt=//p'''

    - platform: command_line
      unique_id: cubeserver_parity_db_raw
      name: 'Cubeserver Parity Db Raw'
      command: 'ssh -i /config/cubeserver.key -o StrictHostKeyChecking=no root@{{ states(''sensor.cubeserver_ip'') }} /root/mdcmd status | sed -n ''s/mdResyncDb=//p'''

    - platform: template
      sensors:
        cubeserver_ip:
          friendly_name: 'Cubeserver IP'
          value_template: !secret cubeserver_ip

        cubeserver_parity_progress:
          unit_of_measurement: '%'
          value_template: >
            {% set parity_common_size = states('sensor.cubeserver_parity_common_size_raw') | int %}
            {% set parity_size = states('sensor.cubeserver_parity_size_raw') | int %}
            {% set parity_pos = states('sensor.cubeserver_parity_pos_raw') | int %}
            {% if parity_size == 0 %}
              {% if parity_pos == 0 %}
                100
              {% else %}
                {{ parity_pos / parity_common_size * 100 }}
              {% endif %}
            {% else %}
              {{ parity_pos / parity_size * 100 }}
            {% endif %}
          availability_template:  >
            {% set valid_parity_common_size = states('sensor.cubeserver_parity_common_size_raw') | int(0) > 0 %}
            {% set valid_parity_size = states('sensor.cubeserver_parity_size_raw') | int(-1) >= 0 %}
            {% set valid_parity_pos = states('sensor.cubeserver_parity_pos_raw') | int(-1) >= 0 %}
            {{ valid_parity_common_size and valid_parity_size and valid_parity_pos }}

        cubeserver_parity_speed:
          unit_of_measurement: 'MB/sec'
          value_template: >
            {% set parity_db = states('sensor.cubeserver_parity_db_raw') | int %}
            {% set parity_dt = states('sensor.cubeserver_parity_dt_raw') | int %}
            {% if parity_dt == 0 %}
              0
            {% else %}
              {{ (parity_db / parity_dt * 1024 / 1e6) | round(1) }}
            {% endif %}
          availability_template: >
            {% set valid_parity_db = states('sensor.cubeserver_parity_db_raw') | int(-1) >= 0 %}
            {% set valid_parity_dt = states('sensor.cubeserver_parity_dt_raw') | int(-1) >= 0 %}
            {{ valid_parity_db and valid_parity_dt }}

        cubeserver_parity_finish_timestamp:
          device_class: timestamp
          value_template: >
            {% set parity_db = states('sensor.cubeserver_parity_db_raw') | float %}
            {% set parity_dt = states('sensor.cubeserver_parity_dt_raw') | float %}
            {% set parity_size = states('sensor.cubeserver_parity_size_raw') | float %}
            {% set parity_pos = states('sensor.cubeserver_parity_pos_raw') | float %}
            {% set seconds = ((parity_size - parity_pos) * parity_dt / parity_db) | round(0) %}
            {{ now() + timedelta(seconds=seconds) }}
          availability_template: >
            {% set valid_parity_db = states('sensor.cubeserver_parity_db_raw') | int(0) > 0 %}
            {% set valid_parity_size = states('sensor.cubeserver_parity_size_raw') | int(0) > 0 %}
            {{ valid_parity_db and valid_parity_size }}

        cubeserver_parity_status:
          value_template: >
            {% set in_progress = is_state('binary_sensor.cubeserver_parity_check_in_progress', 'on') %}
            {% set paused = is_state('binary_sensor.cubeserver_parity_check_paused', 'on') %}
            {% if paused %}
              Пауза
            {% elif in_progress %}
              Выполняется
            {% else %}
              Завершено
            {% endif %}
          icon_template: >
            {% set status = states('sensor.cubeserver_parity_status') %}
            {% if status == 'Пауза' %}
              mdi:pause
            {% elif status == 'Выполняется' %}
              mdi:play
            {% else %}
              mdi:stop
            {% endif %}

    - platform: influxdb
      host: !secret cubeserver_influxdb_host
      port: !secret cubeserver_influxdb_port
      queries:
        - name: 'Cubeserver CPU package temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(1) }}'
          group_function: last
          where: '"feature" = ''package_id_0'' AND "host" = ''cubeserver'''
          measurement: '"sensors"'
          field: 'temp_input'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Parity Disk temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''VRG12HJK'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Disk 1 temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''VRG9GDBK'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Cache 1 temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''S3YBNS0N503747B'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Cache 2 temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''S3Z8NB0K728998H'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver VM Disk temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''S413NB0K214724L'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'


  binary_sensor:
    - platform: ping
      name: cubeserver_vm_windows10_ping
      host: !secret cubeserver_windows10_vm_ip
      scan_interval: 20
      count: 2

    - platform: command_line
      name: cubeserver_vm_windows10_virsh_status
      command: 'if test $(ssh -i /config/cubeserver.key -o StrictHostKeyChecking=no root@{{ states(''sensor.cubeserver_ip'') }} virsh list --all | grep ''Windows 10'' | awk ''{print $4}'') == running; then echo running; else echo ''not running''; fi'
      device_class: connectivity
      payload_on: 'running'
      payload_off: 'not running'

    - platform: template
      sensors:
        cubeserver_parity_check_in_progress:
          friendly_name: 'Parity-Check in progress'
          device_class: running
          value_template: >
            {% set progress = states('sensor.cubeserver_parity_progress') | float %}
            {{ 0 < progress < 100 }}
          availability_template: '{{ states(''sensor.cubeserver_parity_progress'') | float(0) > 0 }}'

        cubeserver_parity_check_paused:
          friendly_name: 'Parity-Check paused'
          value_template: >
            {% set in_progress = is_state('binary_sensor.cubeserver_parity_check_in_progress', 'on') %}
            {% set in_progress_size = states('sensor.cubeserver_parity_size_raw') | int == 0 %}
            {{ in_progress_size and in_progress }}
          availability_template: >
            {% set valid_size = states('sensor.cubeserver_parity_size_raw') | int(-1) >= 0 %}
            {% set valid_in_progress = states('binary_sensor.cubeserver_parity_check_in_progress') in ['on', 'off'] %}
            {{ valid_size and valid_in_progress }}

        cubeserver_parity_disk_overheat:
          friendly_name: 'Перегрев Parity Disk'
          device_class: heat
          value_template: '{{ states(''sensor.cubeserver_parity_disk_temperature'') | float > 44 }}'

        cubeserver_disk_1_overheat:
          friendly_name: 'Перегрев Disk 1'
          device_class: heat
          value_template: '{{ states(''sensor.cubeserver_disk_1_temperature'') | float > 44 }}'

        cubeserver_disks_overheat:
          friendly_name: 'Перегрев дисков'
          device_class: heat
          value_template: >
            {% set parity = is_state('binary_sensor.cubeserver_parity_disk_overheat', 'on') %}
            {% set disk1 = is_state('binary_sensor.cubeserver_disk_1_overheat', 'on') %}
            {{ parity or disk1 }}


  shell_command:
    run_cubeserver_vm_windows10: 'ssh -i /config/cubeserver.key -o StrictHostKeyChecking=no root@{{ states(''sensor.cubeserver_ip'') }} virsh start ''Windows\ 10'''
    shutdown_cubeserver_vm_windows10: 'ssh -i /config/cubeserver.key -o StrictHostKeyChecking=no root@{{ states(''sensor.cubeserver_ip'') }} virsh shutdown ''Windows\ 10'''


  script:
    shutdown_cubeserver_vm_windows10:
      alias: 'cubeserver: выключение VM Windows 10'
      sequence:
        service:
          shell_command.shutdown_cubeserver_vm_windows10


  switch:
    - platform: template
      switches:
        cubeserver_vm_windows10:
          friendly_name: 'VM Windows 10'
          value_template: >
            {% set ping_status = states('binary_sensor.cubeserver_vm_windows10_ping') %}
            {% set virsh_status = states('binary_sensor.cubeserver_vm_windows10_virsh_status') %}
            {{ ping_status and virsh_status }}
          turn_on:
            service: shell_command.run_cubeserver_vm_windows10
          turn_off:
            service: shell_command.shutdown_cubeserver_vm_windows10
          icon_template: mdi:desktop-classic


  automation:
    - id: 'Перегрев дисков - уведомление'
      alias: telegram_cubeserver_disks_overheat
      initial_state: true
      trigger:
        - platform: state
          entity_id: binary_sensor.cubeserver_disks_overheat
          from:
            - 'off'
            - 'on'
          to:
            - 'off'
            - 'on'
          for: '00:01:00'
      action:
        - service: notify.tg
          data:
            message: |
              {% set overheat = trigger.to_state.state | bool %}
              {% set parity_temp = states('sensor.cubeserver_parity_disk_temperature') %}
              {% set disk1_temp = states('sensor.cubeserver_disk_1_temperature') %}
              {% if overheat %}
                {% set messages = ['диски перегреты.',
                                   'дискам жарко!',
                                   'обнаружен перегрев дисков.'] %}
                {% set emoji = '\U0001F525' %}
              {% else %}
                {% set messages = ['диски остыли.',
                                   'диски вернулись к нормальным температурам.'] %}
                {% set emoji = '\U00002744' %}
              {% endif %}
              {{ emoji }} Cubeserver: {{ messages | random }} {{ states('sensor.time_date') }}
              {{ '\U0001F321' }} Температуры дисков:
              Parity: {{ parity_temp }}°C
              Disk 1: {{ disk1_temp }}°C

    - id: 'Начало/окончание Parity-Check - уведомление'
      alias: telegram_cubeserver_parity_check_start_finish
      initial_state: true
      trigger:
        - platform: state
          entity_id: binary_sensor.cubeserver_parity_check_in_progress
          from:
            - 'off'
            - 'on'
          to:
            - 'off'
            - 'on'
          for: '00:00:10'
      action:
        - service: notify.tg
          data:
            message: >
              {% set in_progress = trigger.to_state.state | bool %}
              {% if in_progress %}
                {% set message = 'Запущен Parity-Check.' %}
              {% else %}
                {% set message = 'Parity-Check завершен.' %}
              {% endif %}
              {{ '\U0001F4BF' }} Cubeserver: {{ message }} {{ states('sensor.time_date') }}

    - id: 'Пауза Parity-Check - уведомление'
      alias: telegram_cubeserver_parity_check_pause
      initial_state: true
      trigger:
        - platform: state
          entity_id: binary_sensor.cubeserver_parity_check_paused
          from:
            - 'off'
            - 'on'
          to:
            - 'off'
            - 'on'
          for: '00:00:10'
      action:
        - service: notify.tg
          data:
            message: >
              {% set paused = trigger.to_state.state | bool %}
              {% set progress = states('sensor.cubeserver_parity_progress') | round(2) | string %}
              {% if paused %}
                {% set message = 'Parity-Check поставлен на паузу, завершено ' + progress + '%.' %}
              {% else %}
                {% set message = 'Parity-Check возобновлен.' %}
              {% endif %}
              {{ '\U0001F4C0' }} Cubeserver: {{ message }} {{ states('sensor.time_date') }}

    - id: 'Началась загрузка торрента - уведомление'
      alias: telegram_torrent_downloading_started
      initial_state: true
      trigger:
        - platform: event
          event_type: transmission_started_torrent
      action:
        - service: notify.tg
          data:
            message: >
              {{ '\U00002B07' }} Cubeserver: Началась загрузка торрента. {{ trigger.event.data.name }}

    - id: 'Загрузка торрента завершена - уведомление'
      alias: telegram_torrent_downloading_completed
      initial_state: true
      trigger:
        - platform: event
          event_type: transmission_downloaded_torrent
      action:
        - service: notify.tg
          data:
            message: >
              {{ '\U00002705' }} Cubeserver: Завершена загрузка торрента. {{ trigger.event.data.name }}
