cubeserver:
  sensor:
    - platform: template
      sensors:
        cubeserver_ip:
          friendly_name: 'Cubeserver IP'
          value_template: !secret cubeserver_ip

        cubeserver_windows10_vm_ip:
          friendly_name: 'Windows 10 VM IP'
          value_template: !secret cubeserver_windows10_vm_ip

        cubeserver_windows10_vm_name:
          friendly_name: 'Windows 10 VM name'
          value_template: 'Windows 10'

        cubeserver_parity_progress:
          unit_of_measurement: '%'
          value_template: >
            {% set parity_common_size = states('sensor.cubeserver_parity_common_size_raw') | int %}
            {% set parity_size = states('sensor.cubeserver_parity_size_raw') | int %}
            {% set parity_pos = states('sensor.cubeserver_parity_pos_raw') | int %}
            {% if parity_size == 0 %}
              {% if parity_pos == 0 %}
                100
              {% else %}
                {{ parity_pos / parity_common_size * 100 }}
              {% endif %}
            {% else %}
              {{ parity_pos / parity_size * 100 }}
            {% endif %}
          availability_template: >
            {% set valid_parity_common_size = states('sensor.cubeserver_parity_common_size_raw') | int(0) > 0 %}
            {% set valid_parity_size = states('sensor.cubeserver_parity_size_raw') | int(-1) >= 0 %}
            {% set valid_parity_pos = states('sensor.cubeserver_parity_pos_raw') | int(-1) >= 0 %}
            {{ valid_parity_common_size and valid_parity_size and valid_parity_pos }}

        cubeserver_parity_speed:
          device_class: data_rate
          unit_of_measurement: 'MB/s'
          value_template: >
            {% set parity_db = states('sensor.cubeserver_parity_db_raw') | int %}
            {% set parity_dt = states('sensor.cubeserver_parity_dt_raw') | int %}
            {% if parity_dt == 0 %}
              0
            {% else %}
              {{ (parity_db / parity_dt * 1024 / 1e6) | round(1) }}
            {% endif %}
          availability_template: >
            {% set valid_parity_db = states('sensor.cubeserver_parity_db_raw') | int(-1) >= 0 %}
            {% set valid_parity_dt = states('sensor.cubeserver_parity_dt_raw') | int(-1) >= 0 %}
            {{ valid_parity_db and valid_parity_dt }}

        cubeserver_parity_finish_timestamp:
          device_class: timestamp
          value_template: >
            {% set parity_db = states('sensor.cubeserver_parity_db_raw') | float %}
            {% set parity_dt = states('sensor.cubeserver_parity_dt_raw') | float %}
            {% set parity_size = states('sensor.cubeserver_parity_size_raw') | float %}
            {% set parity_pos = states('sensor.cubeserver_parity_pos_raw') | float %}
            {% set seconds = ((parity_size - parity_pos) * parity_dt / parity_db) | round(0) %}
            {{ now() + timedelta(seconds=seconds) }}
          availability_template: >
            {% set valid_parity_db = states('sensor.cubeserver_parity_db_raw') | int(0) > 0 %}
            {% set valid_parity_size = states('sensor.cubeserver_parity_size_raw') | int(0) > 0 %}
            {{ valid_parity_db and valid_parity_size }}

        cubeserver_parity_status:
          value_template: >
            {% set in_progress = is_state('binary_sensor.cubeserver_parity_check_in_progress', 'on') %}
            {% set paused = is_state('binary_sensor.cubeserver_parity_check_paused', 'on') %}
            {% if paused %}
              Пауза
            {% elif in_progress %}
              Выполняется
            {% else %}
              Завершено
            {% endif %}
          icon_template: >
            {% set status = states('sensor.cubeserver_parity_status') %}
            {% if status == 'Пауза' %}
              mdi:pause
            {% elif status == 'Выполняется' %}
              mdi:play
            {% else %}
              mdi:stop
            {% endif %}

    - platform: influxdb
      host: !secret cubeserver_influxdb_host
      port: !secret cubeserver_influxdb_port
      queries:
        - name: 'Cubeserver CPU package temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(1) }}'
          group_function: last
          where: '"feature" = ''package_id_0'' AND "host" = ''cubeserver'''
          measurement: '"sensors"'
          field: 'temp_input'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Parity Disk temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''VRG12HJK'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Disk 1 temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''VRG9GDBK'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Disk 2 temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''VRKZS4BP'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Cache 1 temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''S3YBNS0N503747B'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Cache 2 temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''S626NF0RA10000H'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver VM Disk temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''S413NB0K214724L'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver Games Disk temperature'
          unit_of_measurement: '°C'
          value_template: '{{ value | round(2) }}'
          group_function: last
          where: '"serial_no" = ''S6PNNS0T502417K'' AND "host" = ''cubeserver'''
          measurement: '"smart_device"'
          field: 'temp_c'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver parity common size raw'
          unit_of_measurement: 'B'
          value_template: '{{ value }}'
          group_function: last
          where: '"host" = ''cubeserver'''
          measurement: '"mdcmd"'
          field: 'mdResyncSize'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver parity size raw'
          unit_of_measurement: 'B'
          value_template: '{{ value }}'
          group_function: last
          where: '"host" = ''cubeserver'''
          measurement: '"mdcmd"'
          field: 'mdResync'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver parity pos raw'
          unit_of_measurement: 'B'
          value_template: '{{ value }}'
          group_function: last
          where: '"host" = ''cubeserver'''
          measurement: '"mdcmd"'
          field: 'mdResyncPos'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver parity dt raw'
          unit_of_measurement: 's'
          value_template: '{{ value }}'
          group_function: last
          where: '"host" = ''cubeserver'''
          measurement: '"mdcmd"'
          field: 'mdResyncDt'
          database: 'cubeserver_telegraf'

        - name: 'Cubeserver parity db raw'
          unit_of_measurement: 'B'
          value_template: '{{ value }}'
          group_function: last
          where: '"host" = ''cubeserver'''
          measurement: '"mdcmd"'
          field: 'mdResyncDb'
          database: 'cubeserver_telegraf'

  binary_sensor:
    - platform: template
      sensors:
        cubeserver_parity_check_in_progress:
          friendly_name: 'Parity-Check in progress'
          device_class: running
          value_template: >
            {% set progress = states('sensor.cubeserver_parity_progress') | float %}
            {{ 0 < progress < 100 }}
          availability_template: "{{ states('sensor.cubeserver_parity_progress') | float(0) > 0 }}"

        cubeserver_parity_check_paused:
          friendly_name: 'Parity-Check paused'
          value_template: >
            {% set in_progress = is_state('binary_sensor.cubeserver_parity_check_in_progress', 'on') %}
            {% set in_progress_size = states('sensor.cubeserver_parity_size_raw') | int == 0 %}
            {{ in_progress_size and in_progress }}
          availability_template: >
            {% set valid_size = states('sensor.cubeserver_parity_size_raw') | int(-1) >= 0 %}
            {% set valid_in_progress = states('binary_sensor.cubeserver_parity_check_in_progress') in ['on', 'off'] %}
            {{ valid_size and valid_in_progress }}

        cubeserver_parity_disk_overheat:
          friendly_name: 'Перегрев Parity Disk'
          device_class: heat
          value_template: "{{ states('sensor.cubeserver_parity_disk_temperature') | float > 44 }}"

        cubeserver_disk_1_overheat:
          friendly_name: 'Перегрев Disk 1'
          device_class: heat
          value_template: "{{ states('sensor.cubeserver_disk_1_temperature') | float > 44 }}"

        cubeserver_disk_2_overheat:
          friendly_name: 'Перегрев Disk 2'
          device_class: heat
          value_template: "{{ states('sensor.cubeserver_disk_2_temperature') | float > 44 }}"

        cubeserver_disks_overheat:
          friendly_name: 'Перегрев дисков'
          device_class: heat
          value_template: >
            {% set parity = is_state('binary_sensor.cubeserver_parity_disk_overheat', 'on') %}
            {% set disk1 = is_state('binary_sensor.cubeserver_disk_1_overheat', 'on') %}
            {% set disk2 = is_state('binary_sensor.cubeserver_disk_2_overheat', 'on') %}
            {{ parity or disk1 or disk2 }}

  # command_line:
  #   - binary_sensor:
  #       unique_id: cubeserver_vm_windows10_virsh_status
  #       name: 'Cubeserver VM Windows10 Virsh Status'
  #       command: "if test $(ssh -i /config/ha.key -o StrictHostKeyChecking=no root@{{ states('sensor.cubeserver_ip') }} virsh list --all | grep 'Windows 10' | awk '{print $4}') == running; then echo running; else echo 'not running'; fi"
  #       device_class: connectivity
  #       payload_on: 'running'
  #       payload_off: 'not running'

  shell_command:
    cubeserver_vm_windows10_run: "ssh -i /config/ha.key -o StrictHostKeyChecking=no root@{{ states('sensor.cubeserver_ip') }} 'virsh start \"{{ states('sensor.cubeserver_windows10_vm_name') }}\"'"
    cubeserver_vm_windows10_shutdown: "ssh -i /config/ha.key -o StrictHostKeyChecking=no root@{{ states('sensor.cubeserver_ip') }} 'virsh shutdown \"{{ states('sensor.cubeserver_windows10_vm_name') }}\"'"
    cubeserver_vm_ubuntuyadisk_run: "ssh -i /config/ha.key -o StrictHostKeyChecking=no root@{{ states('sensor.cubeserver_ip') }} virsh start 'Ubuntu'"
    cubeserver_vm_ubuntuyadisk_shutdown: "ssh -i /config/ha.key -o StrictHostKeyChecking=no root@{{ states('sensor.cubeserver_ip') }} virsh shutdown 'Ubuntu'"
    cubeserver_vm_windows10_switch_to_internal_display: "ssh -i /config/ha.key -o StrictHostKeyChecking=no loskutyan@{{ states('sensor.cubeserver_windows10_vm_ip') }} 'psexec -s -i 1 -accepteula C:\\Windows\\System32\\DisplaySwitch.exe /internal'"
    cubeserver_vm_windows10_switch_to_external_display: "ssh -i /config/ha.key -o StrictHostKeyChecking=no loskutyan@{{ states('sensor.cubeserver_windows10_vm_ip') }} 'psexec -s -i 1 -accepteula C:\\Windows\\System32\\DisplaySwitch.exe /external'"

  script:
    cubeserver_vm_windows10_run:
      alias: 'cubeserver: включение VM Windows 10'
      sequence:
        - service: shell_command.cubeserver_vm_windows10_run
        - delay: 00:02:00
        - if:
            - condition: state
              entity_id: switch.cubeserver_vm_windows10
              state: 'off'
          then:
            - service: notify.tg_bot
              data:
                message: >
                  {{ '\U000026A0' }} Запуск VM Windows прошел неуспешно

    cubeserver_vm_windows10_shutdown:
      alias: 'cubeserver: выключение VM Windows 10'
      sequence:
        - service: shell_command.cubeserver_vm_windows10_shutdown

  switch:
    - platform: template
      switches:
        cubeserver_vm_windows10:
          friendly_name: 'VM Windows 10'
          value_template: >
            {{ states('binary_sensor.cubeserver_vm_windows10_ping') }}
          turn_on:
            service: script.cubeserver_vm_windows10_run
          turn_off:
            service: script.cubeserver_vm_windows10_shutdown
          icon_template: mdi:microsoft-windows

        cubeserver_vm_ubuntuyadisk:
          friendly_name: 'VM Ubuntu YaDisk'
          value_template: >
            {{ states('binary_sensor.cubeserver_vm_ubuntuyadisk_ping') }}
          turn_on:
            service: shell_command.cubeserver_vm_ubuntuyadisk_run
          turn_off:
            service: shell_command.cubeserver_vm_ubuntuyadisk_shutdown
          icon_template: mdi:ubuntu

  automation:
    - id: 'Перегрев дисков - уведомление'
      alias: cubeserver_disks_overheat_notify
      initial_state: true
      trigger:
        - platform: state
          entity_id: binary_sensor.cubeserver_disks_overheat
          from:
            - 'off'
            - 'on'
          to:
            - 'off'
            - 'on'
          for: '00:01:00'
      action:
        - service: notify.tg_bot
          data:
            message: |
              {% set overheat = trigger.to_state.state | bool %}
              {% set parity_temp = states('sensor.cubeserver_parity_disk_temperature') %}
              {% set disk1_temp = states('sensor.cubeserver_disk_1_temperature') %}
              {% set disk2_temp = states('sensor.cubeserver_disk_2_temperature') %}
              {% if overheat %}
                {% set messages = [
                  'диски перегреты.',
                  'дискам жарко!',
                  'обнаружен перегрев дисков.'
                ] %}
                {% set emoji = '\U0001F525' %}
              {% else %}
                {% set messages = [
                  'диски остыли.',
                  'диски вернулись к нормальным температурам.'
                ] %}
                {% set emoji = '\U00002744' %}
              {% endif %}
              {{ emoji }} Cubeserver: {{ messages | random }} {{ states('sensor.time_date') }}
              {{ '\U0001F321' }} Температуры дисков:
              Parity: {{ parity_temp }}°C
              Disk 1: {{ disk1_temp }}°C
              Disk 2: {{ disk2_temp }}°C

    - id: 'Начало/окончание Parity-Check - уведомление'
      alias: cubeserver_parity_check_start_finish_notify
      initial_state: true
      trigger:
        - platform: state
          entity_id: binary_sensor.cubeserver_parity_check_in_progress
          from:
            - 'off'
            - 'on'
          to:
            - 'off'
            - 'on'
          for: '00:00:10'
      action:
        - service: notify.tg_bot
          data:
            message: >
              {% set in_progress = trigger.to_state.state | bool %}
              {% if in_progress %}
                {% set message = 'Запущен Parity-Check.' %}
              {% else %}
                {% set message = 'Parity-Check завершен.' %}
              {% endif %}
              {{ '\U0001F4BF' }} Cubeserver: {{ message }} {{ states('sensor.time_date') }}

    - id: 'Пауза Parity-Check - уведомление'
      alias: cubeserver_parity_check_pause_notify
      initial_state: true
      trigger:
        - platform: state
          entity_id: binary_sensor.cubeserver_parity_check_paused
          from:
            - 'off'
            - 'on'
          to:
            - 'off'
            - 'on'
          for: '00:00:10'
      action:
        - service: notify.tg_bot
          data:
            message: >
              {% set paused = trigger.to_state.state | bool %}
              {% set progress = states('sensor.cubeserver_parity_progress') | round(2) | string %}
              {% if paused %}
                {% set message = 'Parity-Check поставлен на паузу, завершено ' + progress + '%.' %}
              {% else %}
                {% set message = 'Parity-Check возобновлен.' %}
              {% endif %}
              {{ '\U0001F4C0' }} Cubeserver: {{ message }} {{ states('sensor.time_date') }}

    - id: 'Началась загрузка торрента - уведомление'
      alias: torrent_downloading_started_notify
      initial_state: true
      trigger:
        - platform: event
          event_type: transmission_started_torrent
      action:
        - service: notify.tg_media
          data:
            message: >
              {{ '\U00002B07' }} Cubeserver: Началась загрузка торрента. {{ trigger.event.data.name }}

    - id: 'Загрузка торрента завершена - уведомление'
      alias: torrent_downloading_completed_notify
      initial_state: true
      trigger:
        - platform: event
          event_type: transmission_downloaded_torrent
      action:
        - service: notify.tg_media
          data:
            message: >
              {{ '\U00002705' }} Cubeserver: Завершена загрузка торрента. {{ trigger.event.data.name }}
