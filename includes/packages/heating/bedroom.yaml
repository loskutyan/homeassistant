bedroom_heating:
  timer:
    bedroom_airpurifier_heater_remind:
      name: 'Нагреватель бризера в спальне включен, напомнить через '
      duration: 7200

    bedroom_airpurifier_heater_turn_off:
      name: 'Нагреватель бризера в спальне включен, выключение через '
      duration: 18000

    bedroom_airpurifier_heater_cooldown:
      name: 'Нагреватель бризера в спальне остывает, можно включить через '
      duration: 1800

  switch:
    - platform: template
      switches:
        bedroom_airpurifier_ptc:
          friendly_name: 'Нагреватель бризера в спальне'
          value_template: "{{ state_attr('fan.mijia_airpurifier_bedroom', 'ptc') }}"
          availability_template: "{{ states('fan.mijia_airpurifier_bedroom') in ['on', 'off'] }}"
          turn_on:
            service: xiaomi_miio_airpurifier.fan_set_ptc_on
            entity_id: fan.mijia_airpurifier_bedroom
          turn_off:
            service: xiaomi_miio_airpurifier.fan_set_ptc_off
            entity_id: fan.mijia_airpurifier_bedroom
          icon_template: mdi:fire

  binary_sensor:
    - platform: template
      sensors:
        bedroom_airpurifier_ptc_status:
          friendly_name: 'Статус нагревателя бризера в спальне'
          device_class: heat
          value_template: "{{ is_state_attr('fan.mijia_airpurifier_bedroom', 'ptc_status', True) }}"

  automation:
    - id: 'Включение нагревателя бризера в спальне'
      alias: bedroom_airpurifier_heater_turn_on
      initial_state: true
      trigger:
        - platform: time_pattern
          minutes: '/10'
        - platform: state
          entity_id: switch.somebody_home
          from: 'off'
          to: 'on'
        - platform: state
          entity_id: timer.bedroom_airpurifier_heater_cooldown
          to: 'idle'
      condition:
        - condition: state
          entity_id: switch.warm_season
          state: 'off'
        - condition: state
          entity_id: switch.somebody_home
          state: 'on'
        - condition: state
          entity_id: switch.bedroom_asleep
          state: 'off'
        - condition: state
          entity_id: fan.mijia_airpurifier_bedroom
          state: 'on'
          for:
            minutes: 1
        - condition: state
          entity_id: binary_sensor.bedroom_airpurifier_ptc_status
          state: 'off'
          for:
            minutes: 1
        - condition: numeric_state
          entity_id: sensor.bedroom_average_temperature
          below: input_number.target_temperature
        - not:
            - condition: state
              entity_id: timer.bedroom_airpurifier_heater_cooldown
              state: 'active'
      action:
        - service: switch.turn_on
          entity_id: switch.bedroom_airpurifier_ptc

    - id: 'Выключение нагревателя бризера в спальне'
      alias: bedroom_airpurifier_heater_turn_off
      initial_state: true
      trigger:
        - platform: state
          entity_id: timer.bedroom_airpurifier_heater_turn_off
          from: 'active'
          to: 'idle'
        - platform: numeric_state
          entity_id: sensor.bedroom_average_temperature
          value_template: '{{ state.state | float(0) - 0.5 }}'
          above: input_number.target_temperature
          for:
            minutes: 1
      condition:
        - condition: state
          entity_id: switch.bedroom_airpurifier_ptc
          state: 'on'
      action:
        - service: switch.turn_off
          entity_id: switch.bedroom_airpurifier_ptc

    - id: 'Включение нагревателя бризера в спальне - таймеры, уведомление'
      alias: bedroom_airpurifier_heater_turned_on_timers_notify
      initial_state: true
      trigger:
        - platform: state
          entity_id: switch.bedroom_airpurifier_ptc
          from: 'off'
          to: 'on'
      action:
        - service: timer.start
          entity_id:
            - timer.bedroom_airpurifier_heater_turn_off
            - timer.bedroom_airpurifier_heater_remind
        - service: timer.finish
          entity_id: timer.bedroom_airpurifier_heater_cooldown
        - service: notify.tg_bot
          data:
            message: >
              {% set messages = ['Нагреватель бризера в спальне включен!',
                                 'Бризер в спальне начинает греть воздух..',
                                 'Нагреватель бризера в спальне начал жарить!'] %}
              {{ '\U0001F525' }}  {{ messages | random }} {{ states('sensor.time_date') }}
              {{ '\U0001F321' }} Температура {{ states('sensor.bedroom_average_temperature') | round(1) }}°C

    - id: 'Работает нагреватель бризера в спальне - уведомление'
      alias: bedroom_airpurifier_heater_on_reminder
      initial_state: true
      trigger:
        - platform: state
          entity_id: timer.bedroom_airpurifier_heater_remind
          from: 'active'
          to: 'idle'
        - platform: homeassistant
          event: start
      condition:
        - condition: state
          entity_id: switch.bedroom_airpurifier_ptc
          state: 'on'
      action:
        - service: notify.tg_bot
          data:
            message: >
              {% set messages = ['Нагреватель бризера в спальне все еще работает!',
                                 'Бризер в спальне продолжает греть воздух..',
                                 'Нагреватель бризера в спальне еще жарит!'] %}
              {{ '\U0001F525' }} {{ messages | random }} {{ states('sensor.time_date') }}
        - service: timer.start
          entity_id: timer.bedroom_airpurifier_heater_remind

    - id: 'Выключение нагревателя бризера в спальне - таймеры, уведомление'
      alias: bedroom_airpurifier_heater_turned_off_timers_notify
      initial_state: true
      trigger:
        - platform: state
          entity_id: switch.bedroom_airpurifier_ptc
          from: 'on'
          to: 'off'
      action:
        - service: timer.finish
          entity_id:
            - timer.bedroom_airpurifier_heater_remind
            - timer.bedroom_airpurifier_heater_turn_off
        - service: timer.start
          entity_id: timer.bedroom_airpurifier_heater_cooldown
        - service: notify.tg_bot
          data:
            message: >
              {% set messages = ['Нагреватель бризера в спальне выключен!',
                                 'Бризер в спальне завершает греть воздух..',
                                 'Нагреватель бризера в спальне покидает здание!'] %}
              {{ '\U0001F9EF' }} {{ messages | random }} {{ states('sensor.time_date') }}
              {{ '\U0001F321' }} Температура {{ states('sensor.bedroom_average_temperature') | round(1) }}°C
