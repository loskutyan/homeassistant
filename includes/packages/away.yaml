away:
  input_boolean:
    somebody_home:
      name: 'Дома'
      initial: 'on'
  
  
  sensor:
    - platform: template
      sensors:
        lights_switches_list_turned_on:
          friendly_name: 'Список включенных выключателей света'
          value_template: >
            {% set lights_switches_entities_ids = [
              'switch.kidsroom_lights_common_switch_left',
              'switch.kitchen_lights_switch_left',
              'switch.kitchen_lights_switch_right',
              'switch.hallway_lights_switch',
              'switch.bedroom_lights_switch_right',
              'switch.bathroom_lights_switch',
            ] %}
            {{ states.switch
              | selectattr('entity_id', 'in', lights_switches_entities_ids)
              | selectattr('state', '==', 'on')
              | map(attribute='entity_id')
              | list }}
        
        lights_list_turned_on:
          friendly_name: 'Список включенных светильников'
          value_template: >
            {% set lights_entities_ids = [
              'light.bedroom_aqara_led_bulb',
              'light.kidsroom_wall_aqara_led_bulbs',
            ] %}
            {{ states.light
              | selectattr('entity_id', 'in', lights_entities_ids)
              | selectattr('state', '==', 'on')
              | map(attribute='entity_id')
              | list }}
        
        heaters_list_turned_on:
          friendly_name: 'Список включенных нагревателей'
          value_template: >
            {% set heaters_switches_entities_ids = [
              'switch.bedroom_airpurifier_ptc',
              'switch.kidsroom_airpurifier_ptc',
            ] %}
            {{ states.switch
              | selectattr('entity_id', 'in', heaters_switches_entities_ids)
              | selectattr('state', '==', 'on')
              | map(attribute='entity_id')
              | list }}
  
  
  binary_sensor:
    - platform: template
      sensors:
        some_motion_at_home:
          friendly_name: 'Движение дома'
          device_class: motion
          value_template: >
            {{ states('binary_sensor.hallway_motion_sensor_occupancy')
               or states('binary_sensor.kitchen_motion_sensor_occupancy') }}
          delay_off:
            minutes: 10
          icon_template: >
            {% if is_state('binary_sensor.some_motion_at_home', 'on') %}
              mdi:motion-sensor
            {% else %}
              mdi:motion-sensor-off
            {% endif %}
        
        any_light_is_on:
          friendly_name: 'Дома включен свет'
          device_class: light
          value_template: >
            {{ (states('sensor.lights_switches_list_turned_on') | length + states('sensor.lights_list_turned_on') | length) > 0 }}
        
        any_heater_is_on:
          friendly_name: 'Дома включен подогрев воздуха'
          device_class: heat
          value_template: >
            {{ states('sensor.lights_switches_list_turned_on') | length > 0 }}
  
  
  switch:
    - platform: template
      switches:
        somebody_home:
          friendly_name: 'Дома'
          value_template: >
            {{ states('input_boolean.somebody_home') }}
          turn_on:
            service: input_boolean.turn_on
            data:
              entity_id: input_boolean.somebody_home
          turn_off:
            service: input_boolean.turn_off
            data:
              entity_id: input_boolean.somebody_home
          icon_template: >
            {% if is_state('input_boolean.somebody_home', 'on') %}
              mdi:home-account
            {% else %}
              mdi:home-minus
            {% endif %}
  
  
  script:
    turn_off_all_lights:
      alias: 'Выключение всех светильников'
      sequence:
        - service: light.turn_off
          data_template:
            entity_id: >-
              {{ states('sensor.lights_list_turned_on') }}
        - service: switch.turn_off
          data_template:
            entity_id: >-
              {{ states('sensor.lights_switches_list_turned_on') }}
        - service: notify.tg
          data:
            message: >
              {% set messages = ['Весь свет выключен',
                                 'Свет выключен - сэкономили кучу денег',
                                 'Светильники обесточены... но это неточно'] %}
              {{ '\U0001F4A1' }} {{ messages | random }}
    
    turn_off_all_heaters:
      alias: 'Выключение всех обогревателей'
      sequence:
        - service: switch.turn_off
          data_template:
            entity_id: >
              {{ states('sensor.heaters_list_turned_on') }}
        - service: notify.tg
          data:
            message: >
              {% set messages = ['Все обогреватели выключены',
                                 'Нагрев выключен - сэкономили кучу денег',
                                 'Обогреватели обесточены... но это неточно'] %}
              {{ '\U0001F525' }} {{ messages | random }}
  
  
  automation:
    - id: 'Все ушли из дома, выключаем свет'
      alias: everyone_left_home_turn_off_lights
      trigger:
        - platform: state
          entity_id: input_boolean.somebody_home
          from: 'on'
          to: 'off'
      condition:
        - condition: state
          entity_id: binary_sensor.any_light_is_on
          state: 'on'
      action:
        - service: script.turn_on
          entity_id: script.turn_off_all_lights
    
    - id: 'Все ушли из дома, выключаем нагреватели'
      alias: everyone_left_home_turn_off_heaters
      trigger:
        - platform: state
          entity_id: input_boolean.somebody_home
          from: 'on'
          to: 'off'
      condition:
        - condition: state
          entity_id: binary_sensor.any_header_is_on
          state: 'on'
      action:
        - service: script.turn_on
          entity_id: script.turn_off_all_heaters
    
    - id: 'Входная дверь закрылась, запуск таймера проверки отсутствия'
      alias: left_home_check_timer_start
      trigger:
        - platform: state
          entity_id: binary_sensor.hallway_door_sensor_contact
          from: 'on'
          to: 'off'
      condition:
        - condition: state
          entity_id: binary_sensor.phone_presence
          state: 'on'
        - condition: state
          entity_id: timer.left_home_by_phone_presence_after_door_closed
          state: 'idle'
      action:
        - service: timer.start
          entity_id: timer.left_home_by_phone_presence_after_door_closed
    
    - id: 'Телефон вышел из сети после закрытия двери'
      alias: phone_left_home_after_door_was_closed
      trigger:
        - platform: state
          entity_id: binary_sensor.phone_presence
          from: 'on'
          to: 'off'
      condition:
        - condition: state
          entity_id: timer.left_home_by_phone_presence_after_door_closed
          state: 'active'
      action:
        - service: input_boolean.turn_off
          entity_id: input_boolean.somebody_home
        - service: timer.finish
          entity_id: timer.left_home_by_phone_presence_after_door_closed
    
    - id: 'Кто-то дома после закрытия двери'
      alias: somebody_home_after_door_was_closed
      trigger:
        - platform: state
          entity_id: binary_sensor.some_motion_at_home
          to: 'on'
        - platform: state
          entity_id: binary_sensor.hallway_door_sensor_contact
          to: 'on'
        - platform: state
          entity_id: binary_sensor.bathroom_door_sensor_contact
          from:
            - 'on'
            - 'off'
          to:
            - 'on'
            - 'off'
        - platform: state
          entity_id: sensor.bedroom_aqara_button_action
          to:
            - 'single'
            - 'double'
            - 'hold'
      condition:
        - condition: state
          entity_id: timer.left_home_by_phone_presence_after_door_closed
          state: 'active'
      action:
        - service: input_boolean.turn_on
          entity_id: input_boolean.somebody_home
        - service: timer.finish
          entity_id: timer.left_home_by_phone_presence_after_door_closed
    
    - id: 'Кто-то вернулся домой'
      alias: somebody_back_home
      trigger:
        - platform: state
          entity_id: binary_sensor.hallway_door_sensor_contact
          to: 'on'
        - platform: state
          entity_id: binary_sensor.phone_presence
          from: 'off'
          to: 'on'
      condition:
        - condition: state
          entity_id: input_boolean.somebody_home
          state: 'off'
      action:
        - service: input_boolean.turn_on
          entity_id: input_boolean.somebody_home
        - service: notify.tg
          data:
            message: >
              {% set messages = ['С возвращением!',
                                 'Welcome back',
                                 'И снова здравствуйте!'] %}
              {{ '\U0001F596' }} {{ messages | random }} {{ '\U0001F60A' }}
